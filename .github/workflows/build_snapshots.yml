name: Build Snapshots

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  target_flavour: opt

jobs:
  build:
    name: ${{ matrix.name }} ${{ matrix.cpu }}
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: ubuntu-latest
            name: Linux
            cpu: x86_64
            os: linux
          - image: ubuntu-latest
            name: Linux
            cpu: aarch64
            os: linux
          - image: ubuntu-22.04
            name: Windows
            cpu: x86_64
            os: mingw-w64
          - image: macos-12
            name: MacOS
            cpu: x86_64
            os: darwin
          - image: macos-12
            name: MacOS
            cpu: aarch64
            os: darwin
          - image: ubuntu-latest
            name: Android
            cpu: arm
            os: android
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install Linux prerequisites
      if: ${{ matrix.os == 'linux' }}
      run: sudo apt-get install libgl-dev libglu1-mesa-dev libasound2-dev
    - name: Install Windows prerequisites
      if: ${{ contains(matrix.os, 'mingw') }}
      run: sudo apt-get install mingw-w64 gcc make tcl
    - name: Add NDK to PATH
      if: ${{ contains(matrix.os, 'android') }}
      run: echo "$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
    - name: Configure MinGW to use Posix threads
      if: ${{ contains(matrix.os, 'mingw') }}
      run: |
        sudo update-alternatives --set i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix
        sudo update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix
        sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
        sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
    - name: Make
      run: |
        CXX_PART=""
        if [ "${{ matrix.os }}" = "linux" ]; then
          CXX_PART=" CXX=g++-10"
        fi
        make \
          OPENMSX_TARGET_CPU=${{ matrix.cpu }} \
          OPENMSX_TARGET_OS=${{ matrix.os }} \
          OPENMSX_FLAVOUR=${{ env.target_flavour }} \
          $CXX_PART \
          staticbindist
    - name: Determine version and redistributable paths and names
      id: openmsx
      run: |
        OPENMSX_VERSION=`python3 build/version.py`
        DERIVED_PATH=derived/${{ matrix.cpu }}-${{ matrix.os }}-${{ env.target_flavour }}-3rd
        if [ "${{ matrix.os }}" = "darwin" ]; then
          HAS_SINGLE_FILE_OUTPUT=true
          SINGLE_OUTPUT_FILE=openmsx-${OPENMSX_VERSION}-mac-${{ matrix.cpu }}-bin.dmg
        else
          HAS_SINGLE_FILE_OUTPUT=false
        fi
        echo "::set-output name=version::$OPENMSX_VERSION"
        echo "::set-output name=derived_path::$DERIVED_PATH"
        echo "::set-output name=single_output_file::$SINGLE_OUTPUT_FILE"
        echo "::set-output name=target_file::openmsx-$OPENMSX_VERSION-${{ matrix.os }}-${{ matrix.cpu }}-bin"
        echo "::set-output name=single_file::$HAS_SINGLE_FILE_OUTPUT"
    - name: Rename output folder for upload
      if: ${{ steps.openmsx.outputs.single_file == 'false' }}
      run: |
        cd ${{ steps.openmsx.outputs.derived_path }}/bindist
        mv install ../${{ steps.openmsx.outputs.target_file }}
    - name: Upload redistributable zip
      if: ${{ steps.openmsx.outputs.single_file == 'false' }}
      uses: actions/upload-artifact@v1
      with:
        name: ${{ steps.openmsx.outputs.target_file }}.zip
        path: ${{ steps.openmsx.outputs.derived_path }}/${{ steps.openmsx.outputs.target_file }}
    - name: Upload single redistributable ${{ steps.openmsx.outputs.single_output_file}}
      if: ${{ steps.openmsx.outputs.single_file == 'true' }}
      uses: actions/upload-artifact@v1
      with:
        name: ${{ steps.openmsx.outputs.single_output_file }}
        path: ${{ steps.openmsx.outputs.derived_path }}/${{ steps.openmsx.outputs.single_output_file }}
    - name: Upload probe logging zip
      uses: actions/upload-artifact@v1
      with:
        name: ${{ steps.openmsx.outputs.target_file }}-proberesults.zip
        path: ${{ steps.openmsx.outputs.derived_path }}/config
